package com.tastyrhino

import com.badlogic.gdx.Gdx
import com.badlogic.gdx.graphics.g2d.PolygonRegion
import com.badlogic.gdx.graphics.g2d.PolygonSprite
import com.badlogic.gdx.graphics.g2d.Sprite
import com.badlogic.gdx.graphics.g2d.TextureRegion
import com.badlogic.gdx.graphics.glutils.ShapeRenderer
import com.badlogic.gdx.math.Vector2
import com.badlogic.gdx.physics.box2d.*
import com.badlogic.gdx.physics.box2d.joints.WheelJoint
import ktx.box2d.*

class PhysicsObject(
    val outline: FloatArray, val polygons: List<Array<Vector2>>, val triangles: FloatArray
) {
    val triangleIndices = listOfTriangleIndices(triangles)

    companion object {
        fun fromStringComponents(convexSplit: String, vertices: String, triangleSplit: String): PhysicsObject {
            val v = listOfPolygonsFromString(vertices).toFloatArray()
            val c = listOfPolygonSplitsFromString(convexSplit)
            val t = listOfTriangleVertices(triangleSplit)
            return PhysicsObject(v, c, t)
        }
    }
}

class TerrainPart(textureRegion: TextureRegion, val physicsObject: PhysicsObject, scale: Float = 100f) {

    val polyRegion = PolygonRegion(
        textureRegion, physicsObject.triangles.scaleBy(scale), physicsObject.triangleIndices
    )

    val polySprite = PolygonSprite(polyRegion).apply {
        setBounds(
            0f, 0f, textureRegion.regionWidth.toFloat() / scale, textureRegion.regionHeight.toFloat() / scale
        )
    }

    fun drawOutline(shapeRenderer: ShapeRenderer) {
        Gdx.gl20.glLineWidth(3f);
        shapeRenderer.polygon(physicsObject.outline)
    }

    fun addBodyToWorld(world: World, frictionVal: Float = 1.0f) {
        world.body()
        {
            loop(vertices = physicsObject.outline) {
                density = 0f
                friction = frictionVal
            }
        }

    }
}

class StaticObject(
    textureRegion: TextureRegion,
    val physicsObject: PhysicsObject,
    val size: Float = 1f,
    val pos: Vector2 = Vector2()
) {
    val sprite = Sprite(textureRegion).apply {
        setPosition(pos.x, pos.y)
        setSize(size, size * textureRegion.regionHeight.toFloat() / textureRegion.regionWidth.toFloat())
    }

    fun addBodyToWorld(world: World, frictionVal: Float = 1.0f) {
        world.body {
            position.set(pos)
            physicsObject.polygons.map {
                polygon(vertices = it.map { it.scl(1f / 100f * size) }.toTypedArray())
                {
                    density = 0f
                    friction = frictionVal
                }
            }
        }
    }

}

fun FloatArray.scaleBy(polyTextureScale: Float) = map { it * polyTextureScale }.toFloatArray()


object PhysicsObjects {
    fun createTireFront(world: World, bikePosition: Vector2, bikeScaling: Float): Body {
        return world.body(type = BodyDef.BodyType.DynamicBody) {
            position.set(bikePosition.x + 4f - 2.7941f, bikePosition.y + 2f - 2.875546f)
            circle(radius = 13.5f * bikeScaling) {
                friction = 8.999999761581421e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.700000000000000e+00f; //default 1.5f
            }
        }
    }

    fun createTireBack(world: World, bikePosition: Vector2, bikeScaling: Float): Body {
        return world.body(type = BodyDef.BodyType.DynamicBody) {
            position.set(bikePosition.x + 1f - 2.7941f, bikePosition.y + 2f - 2.875546f)
            circle(radius = 13.5f * bikeScaling) {
                friction = 8.999999761581421e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.700000000000000e+00f;
            }
        }
    }


    fun createBikeBody(world: World, bikePosition: Vector2, bikeScaling: Float): Body {

        return world.body(type = BodyDef.BodyType.DynamicBody) {
            position.set(bikePosition)
            angle = 0f

            polygon(
                vertices = arrayOf(
                    Vector2(73.0f, 51.0f), Vector2(68.0f, 59.0f), Vector2(67.0f, 56.0f), Vector2(70.0f, 49.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }

            polygon(
                vertices = arrayOf(
                    Vector2(67.0f, 56.0f), Vector2(68.0f, 59.0f), Vector2(62.0f, 54.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }

            polygon(
                vertices = arrayOf(
                    Vector2(59.0f, 48.0f),
                    Vector2(62.0f, 54.0f),
                    Vector2(42.0f, 40.0f),
                    Vector2(52.0f, 38.0f),
                    Vector2(56.0f, 43.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(62.0f, 54.0f),
                    Vector2(68.0f, 59.0f),
                    Vector2(41.0f, 46.0f),
                    Vector2(35.5f, 39.0f),
                    Vector2(42.0f, 40.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(34.5f, 43.5f), Vector2(35.5f, 39.0f), Vector2(41.0f, 46.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(41.0f, 46.0f), Vector2(68.0f, 59.0f), Vector2(36.0f, 49.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(36.0f, 49.0f), Vector2(68.0f, 59.0f), Vector2(21.0f, 58.0f), Vector2(21.0f, 55.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(21.0f, 58.0f),
                    Vector2(68.0f, 59.0f),
                    Vector2(43.0f, 62.0f),
                    Vector2(24.0f, 63.0f),
                    Vector2(19.0f, 62.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            //Spike Back
//            polygon(
//                vertices = arrayOf(
//                    Vector2(0.0f, 50.0f), Vector2(19.0f, 62.0f), Vector2(10.5f, 62.5f)
//                ).map { it.scl(bikeScaling) }.toTypedArray()
//            ) {
//                friction = 5.000000000000000e-01f;
//                restitution = 0.000000000000000e+00f;
//                density = 0.000000000000000e+00f;
//            }
            //Spike
            polygon(
                vertices = arrayOf(
                    Vector2(10.5f, 62.5f),
                    Vector2(19.0f, 62.0f),
                    Vector2(17.5f, 72.5f),
                    Vector2(4.5f, 85.0f),
                    Vector2(0.5f, 87.0f),
                    Vector2(0.0f, 79.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.000000000000000e+00f;
            }

            //Spike
            polygon(
                vertices = arrayOf(
                    Vector2(17.5f, 72.5f), Vector2(19.0f, 62.0f), Vector2(24.0f, 63.0f), Vector2(18.0f, 89.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(43.0f, 62.0f), Vector2(68.0f, 59.0f), Vector2(57.0f, 65.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(57.0f, 65.0f), Vector2(68.0f, 59.0f), Vector2(61.0f, 67.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(58.0f, 70.0f), Vector2(61.0f, 67.0f), Vector2(57.0f, 73.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(61.0f, 67.0f),
                    Vector2(68.0f, 59.0f),
                    Vector2(68.0f, 63.0f),
                    Vector2(63.0f, 72.0f),
                    Vector2(57.0f, 73.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(68.0f, 63.0f), Vector2(68.0f, 59.0f), Vector2(71.5f, 63.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(80.0f, 75.0f), Vector2(71.5f, 63.5f), Vector2(92.0f, 85.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(71.5f, 63.5f), Vector2(68.0f, 59.0f), Vector2(78.5f, 69.5f), Vector2(92.0f, 85.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(78.5f, 69.5f), Vector2(68.0f, 59.0f), Vector2(80.0f, 64.5f), Vector2(97.0f, 79.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(80.0f, 64.5f), Vector2(68.0f, 59.0f), Vector2(74.5f, 60.5f), Vector2(102.0f, 73.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(104.5f, 64.5f), Vector2(84.0f, 61.5f), Vector2(87.0f, 58.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(87.0f, 58.0f), Vector2(84.0f, 61.5f), Vector2(74.5f, 60.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }
            polygon(
                vertices = arrayOf(
                    Vector2(84.0f, 61.5f), Vector2(102.0f, 73.0f), Vector2(74.5f, 60.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 1.000000000000000e+00f;
            }

            //DRIVER
            val d1 = polygon(
                vertices = arrayOf(
                    Vector2(57.0f, 73.0f),
                    Vector2(60.5f, 75.5f),
                    Vector2(53.0f, 76.5f),
                    Vector2(30.5f, 68.5f),
                    Vector2(31.0f, 63.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.010000000000000e+00f;
                userData = GameScreen.CollisionObjectType.DRIVER
            }
            polygon(
                vertices = arrayOf(
                    Vector2(57.0f, 73.0f),
                    Vector2(60.5f, 75.5f),
                    Vector2(53.0f, 76.5f),
                    Vector2(30.5f, 68.5f),
                    Vector2(31.0f, 63.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.010000000000000e+00f;
                userData = GameScreen.CollisionObjectType.DRIVER
            }
            polygon(
                vertices = arrayOf(
                    Vector2(47.0f, 97.0f), Vector2(46.0f, 90.5f), Vector2(56.5f, 96.5f), Vector2(51.0f, 99.0f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.010000000000000e+00f;
                userData = GameScreen.CollisionObjectType.DRIVER
            }
            polygon(
                vertices = arrayOf(
                    Vector2(50.0f, 83.0f), Vector2(30.5f, 68.5f), Vector2(53.0f, 76.5f)
                ).map { it.scl(bikeScaling) }.map { it.sub(Vector2(2.7941f, 2.875546f)) }.toTypedArray()
            ) {
                friction = 5.000000000000000e-01f;
                restitution = 0.000000000000000e+00f;
                density = 0.010000000000000e+00f;
                userData = GameScreen.CollisionObjectType.DRIVER
            }
        }
    }

    fun createJointFront(bikeBody: Body, tireFront: Body, tireBack: Body, bikeScaling: Float): WheelJoint {
        return bikeBody.wheelJointWith(tireFront) {
            localAnchorA.set(78f * bikeScaling - 2.7941f, 38f * bikeScaling - 2.875546f)
            localAxisA.set(67f - 78f, 57f - 38.5f).setLength2(1f)
            enableMotor = true
            motorSpeed = 0f
            maxMotorTorque = 40f //20f
            frequencyHz = 3.8f
            dampingRatio = 0.7f

        }

    }

    fun createJointBack(bikeBody: Body, tireFront: Body, tireBack: Body, bikeScaling: Float): WheelJoint {
        return bikeBody.wheelJointWith(tireBack) {
            localAnchorA.set(21.5f * bikeScaling - 2.7941f, 38f * bikeScaling - 2.875546f)
            localAxisA.set(29f - 21.5f, 54f - 38.5f).setLength2(1f)
            enableMotor = true
            motorSpeed = 0f
            maxMotorTorque = 40f //20f
            frequencyHz = 3.8f
            dampingRatio = 0.7f
        }
    }

    fun createCarWreck(world: World): Body {
        return world.body {
            carWreck.polygons.map {
                polygon(vertices = it) {
                    friction = 0.5f
                }
            }
        }
    }


    val terrainGround1 = PhysicsObject.fromStringComponents(
        "16.5,12.5;6.5,12.0;27.0,12.0|44.0,12.0;6.5,12.0;51.0,9.5;47.5,11.0|96.5,11.5;93.0,9.0;122.0,11.5;118.0,13.0;113.0,14.0;108.0,14.5;102.0,14.0|137.0,21.0;135.0,17.0;138.5,17.0|135.0,17.0;131.0,14.0;141.0,13.5;138.5,17.0|131.0,14.0;126.5,12.5;141.0,13.5|126.5,12.5;122.0,11.5;146.0,10.5;141.0,13.5|122.0,11.5;93.0,9.0;152.5,9.5;146.0,10.5|152.5,9.5;93.0,9.0;171.5,4.5;159.0,9.0|93.0,9.0;51.0,9.5;179.0,-2.0;171.5,4.5|51.0,9.5;6.5,12.0;179.0,-2.0|6.5,12.0;-0.5,12.5;189.0,-11.5;179.0,-2.0|189.0,-11.5;-0.5,12.5;201.5,-18.5|201.5,-18.5;-0.5,12.5;-71.5,-172.0;229.0,-31.5;214.0,-24.0|340.5,28.0;325.0,4.0;358.5,31.5|325.0,4.0;310.0,-14.5;374.5,40.0;358.5,31.5|374.5,40.0;310.0,-14.5;408.0,54.5;389.5,48.5|408.0,54.5;310.0,-14.5;426.0,60.5|426.0,60.5;310.0,-14.5;435.5,65.0|457.0,85.0;450.5,77.0;467.0,93.5|450.5,77.0;445.5,71.5;497.5,111.0;485.0,105.5;476.0,100.5;467.0,93.5|497.5,111.0;445.5,71.5;518.5,122.0;510.5,118.5|530.0,131.0;518.5,122.0;543.5,135.5|518.5,122.0;445.5,71.5;552.5,137.0;543.5,135.5|445.5,71.5;435.5,65.0;552.5,137.0|435.5,65.0;310.0,-14.5;564.0,136.5;552.5,137.0|310.0,-14.5;296.0,-23.0;574.5,137.0;564.0,136.5|574.5,137.0;296.0,-23.0;589.5,137.0;585.0,137.5|587.5,139.5;585.0,137.5;589.5,137.0|589.5,137.0;296.0,-23.0;598.0,136.5|598.0,136.5;296.0,-23.0;619.0,136.0;611.0,137.0;607.5,137.0|609.0,139.5;607.5,137.0;611.0,137.0|619.0,136.0;296.0,-23.0;633.5,135.0;630.5,135.5|632.0,138.0;630.5,135.5;633.5,135.0|633.5,135.0;296.0,-23.0;650.5,134.5;640.0,135.5|652.0,137.5;650.5,134.5;654.0,134.5|650.5,134.5;296.0,-23.0;654.0,134.5|654.0,134.5;296.0,-23.0;675.0,136.0;664.5,136.0|676.5,139.0;675.0,136.0;678.5,136.5|675.0,136.0;296.0,-23.0;689.0,137.0;678.5,136.5|689.0,137.0;296.0,-23.0;729.0,142.5;715.0,141.5;702.0,140.5;698.0,140.0|699.5,143.0;698.0,140.0;702.0,140.5|729.0,142.5;296.0,-23.0;741.0,144.5|752.0,149.0;741.0,144.5;765.5,152.5|741.0,144.5;296.0,-23.0;782.0,153.0;765.5,152.5|782.0,153.0;296.0,-23.0;796.5,155.0|796.5,155.0;296.0,-23.0;809.5,158.0|809.5,158.0;296.0,-23.0;837.5,162.5;823.5,161.5|837.5,162.5;296.0,-23.0;846.0,156.0;853.5,164.0|846.0,156.0;296.0,-23.0;857.0,144.5;852.0,152.0|296.0,-23.0;281.0,-27.5;861.5,137.0;867.0,142.5;857.0,144.5|861.5,137.0;281.0,-27.5;894.5,129.0;892.5,133.5|281.0,-27.5;261.5,-32.5;929.0,122.5;925.5,127.0;920.5,131.5;894.5,129.0|899.5,147.0;900.5,141.5;908.0,142.5|900.5,141.5;900.0,134.5;908.0,142.5|908.0,142.5;894.5,129.0;914.5,136.0|914.5,136.0;894.5,129.0;920.5,131.5|929.0,122.5;261.5,-32.5;941.5,107.5;935.0,117.0|941.5,107.5;261.5,-32.5;946.5,103.5|946.5,103.5;261.5,-32.5;977.0,83.0;971.5,87.0;964.5,92.0;955.5,98.0|977.0,83.0;261.5,-32.5;985.5,78.0|985.5,78.0;261.5,-32.5;995.5,74.0|995.5,74.0;261.5,-32.5;1021.5,66.0;1006.0,71.0|1021.5,66.0;261.5,-32.5;1068.0,18.5;1073.5,33.5;1072.0,50.0;1048.0,62.5|1068.0,18.5;261.5,-32.5;1075.0,9.5|1075.0,9.5;261.5,-32.5;1095.5,7.0;1088.5,8.0|1095.5,7.0;261.5,-32.5;1107.5,5.5|1139.0,13.5;1128.5,7.5;1209.0,19.0;1193.0,26.0;1176.5,29.0;1151.5,20.0|1162.5,26.5;1151.5,20.0;1176.5,29.0|1209.0,19.0;1118.0,6.0;1230.5,12.5|1230.5,12.5;1118.0,6.0;1254.0,6.0|1118.0,6.0;1107.5,5.5;1254.0,6.0|1107.5,5.5;261.5,-32.5;1270.5,3.5;1254.0,6.0|261.5,-32.5;248.0,-33.0;1284.5,-33.0;1284.5,-20.5;1280.5,-5.5;1270.5,3.5|1284.5,-33.0;248.0,-33.0;1288.0,-46.0|1288.0,-46.0;248.0,-33.0;1293.5,-56.0|1293.5,-56.0;248.0,-33.0;1304.0,-64.0|1304.0,-64.0;248.0,-33.0;2049.5,-302.5;1321.0,-67.5|1364.5,-45.5;1363.0,-53.5;1369.5,-54.0|1363.0,-53.5;1360.0,-60.5;1379.0,-62.0;1369.5,-54.0|1360.0,-60.5;1351.5,-64.5;1379.0,-62.0|1351.5,-64.5;1336.5,-66.0;1379.0,-62.0|1336.5,-66.0;1321.0,-67.5;1396.5,-62.5;1379.0,-62.0|1466.0,-35.0;1455.5,-50.0;1484.0,-40.5|1455.5,-50.0;1438.0,-57.5;1506.5,-48.5;1484.0,-40.5|1438.0,-57.5;1428.5,-60.0;1720.0,-49.5;1506.5,-48.5|1428.5,-60.0;1396.5,-62.5;1720.0,-49.5|1396.5,-62.5;1321.0,-67.5;2049.5,-302.5;1758.0,-49.0;1720.0,-49.5|1864.0,143.0;1846.0,86.0;1952.5,249.5|1846.0,86.0;1818.0,23.5;1952.5,249.5|1818.0,23.5;1797.0,-16.0;2049.5,-302.5;2055.0,274.0;1952.5,249.5|1797.0,-16.0;1758.0,-49.0;2049.5,-302.5|248.0,-33.0;229.0,-31.5;-71.5,-172.0;2049.5,-302.5|-71.0,143.0;-71.5,-172.0;-22.0,40.5|-22.0,40.5;-71.5,-172.0;-6.5,16.0;-7.5,24.0;-9.0,29.5|-6.5,16.0;-71.5,-172.0;-0.5,12.5","-0.5,12.5;-6.5,16.0;-7.5,24.0;-9.0,29.5;-22.0,40.5;-71.0,143.0;-71.5,-172.0;2049.5,-302.5;2055.0,274.0;1952.5,249.5;1864.0,143.0;1846.0,86.0;1818.0,23.5;1797.0,-16.0;1758.0,-49.0;1720.0,-49.5;1506.5,-48.5;1484.0,-40.5;1466.0,-35.0;1455.5,-50.0;1438.0,-57.5;1428.5,-60.0;1396.5,-62.5;1379.0,-62.0;1369.5,-54.0;1364.5,-45.5;1363.0,-53.5;1360.0,-60.5;1351.5,-64.5;1336.5,-66.0;1321.0,-67.5;1304.0,-64.0;1293.5,-56.0;1288.0,-46.0;1284.5,-33.0;1284.5,-20.5;1280.5,-5.5;1270.5,3.5;1254.0,6.0;1230.5,12.5;1209.0,19.0;1193.0,26.0;1176.5,29.0;1162.5,26.5;1151.5,20.0;1139.0,13.5;1128.5,7.5;1118.0,6.0;1107.5,5.5;1095.5,7.0;1088.5,8.0;1075.0,9.5;1068.0,18.5;1073.5,33.5;1072.0,50.0;1048.0,62.5;1021.5,66.0;1006.0,71.0;995.5,74.0;985.5,78.0;977.0,83.0;971.5,87.0;964.5,92.0;955.5,98.0;946.5,103.5;941.5,107.5;935.0,117.0;929.0,122.5;925.5,127.0;920.5,131.5;914.5,136.0;908.0,142.5;899.5,147.0;900.5,141.5;900.0,134.5;894.5,129.0;892.5,133.5;861.5,137.0;867.0,142.5;857.0,144.5;852.0,152.0;846.0,156.0;853.5,164.0;837.5,162.5;823.5,161.5;809.5,158.0;796.5,155.0;782.0,153.0;765.5,152.5;752.0,149.0;741.0,144.5;729.0,142.5;715.0,141.5;702.0,140.5;699.5,143.0;698.0,140.0;689.0,137.0;678.5,136.5;676.5,139.0;675.0,136.0;664.5,136.0;654.0,134.5;652.0,137.5;650.5,134.5;640.0,135.5;633.5,135.0;632.0,138.0;630.5,135.5;619.0,136.0;611.0,137.0;609.0,139.5;607.5,137.0;598.0,136.5;589.5,137.0;587.5,139.5;585.0,137.5;574.5,137.0;564.0,136.5;552.5,137.0;543.5,135.5;530.0,131.0;518.5,122.0;510.5,118.5;497.5,111.0;485.0,105.5;476.0,100.5;467.0,93.5;457.0,85.0;450.5,77.0;445.5,71.5;435.5,65.0;426.0,60.5;408.0,54.5;389.5,48.5;374.5,40.0;358.5,31.5;340.5,28.0;325.0,4.0;310.0,-14.5;296.0,-23.0;281.0,-27.5;261.5,-32.5;248.0,-33.0;229.0,-31.5;214.0,-24.0;201.5,-18.5;189.0,-11.5;179.0,-2.0;171.5,4.5;159.0,9.0;152.5,9.5;146.0,10.5;141.0,13.5;138.5,17.0;137.0,21.0;135.0,17.0;131.0,14.0;126.5,12.5;122.0,11.5;118.0,13.0;113.0,14.0;108.0,14.5;102.0,14.0;96.5,11.5;93.0,9.0;51.0,9.5;47.5,11.0;44.0,12.0;37.0,12.0;27.0,12.0;16.5,12.5;6.5,12.0 ","16.5,12.5;6.5,12.0;27.0,12.0|44.0,12.0;6.5,12.0;47.5,11.0|47.5,11.0;6.5,12.0;51.0,9.5|96.5,11.5;93.0,9.0;102.0,14.0|102.0,14.0;93.0,9.0;108.0,14.5|108.0,14.5;93.0,9.0;113.0,14.0|113.0,14.0;93.0,9.0;118.0,13.0|118.0,13.0;93.0,9.0;122.0,11.5|137.0,21.0;135.0,17.0;138.5,17.0|135.0,17.0;131.0,14.0;138.5,17.0|138.5,17.0;131.0,14.0;141.0,13.5|131.0,14.0;126.5,12.5;141.0,13.5|126.5,12.5;122.0,11.5;141.0,13.5|141.0,13.5;122.0,11.5;146.0,10.5|122.0,11.5;93.0,9.0;146.0,10.5|146.0,10.5;93.0,9.0;152.5,9.5|152.5,9.5;93.0,9.0;159.0,9.0|159.0,9.0;93.0,9.0;171.5,4.5|93.0,9.0;51.0,9.5;171.5,4.5|171.5,4.5;51.0,9.5;179.0,-2.0|51.0,9.5;6.5,12.0;179.0,-2.0|6.5,12.0;-0.5,12.5;179.0,-2.0|179.0,-2.0;-0.5,12.5;189.0,-11.5|189.0,-11.5;-0.5,12.5;201.5,-18.5|201.5,-18.5;-0.5,12.5;214.0,-24.0|214.0,-24.0;-0.5,12.5;229.0,-31.5|340.5,28.0;325.0,4.0;358.5,31.5|325.0,4.0;310.0,-14.5;358.5,31.5|358.5,31.5;310.0,-14.5;374.5,40.0|374.5,40.0;310.0,-14.5;389.5,48.5|389.5,48.5;310.0,-14.5;408.0,54.5|408.0,54.5;310.0,-14.5;426.0,60.5|426.0,60.5;310.0,-14.5;435.5,65.0|457.0,85.0;450.5,77.0;467.0,93.5|450.5,77.0;445.5,71.5;467.0,93.5|467.0,93.5;445.5,71.5;476.0,100.5|476.0,100.5;445.5,71.5;485.0,105.5|485.0,105.5;445.5,71.5;497.5,111.0|497.5,111.0;445.5,71.5;510.5,118.5|510.5,118.5;445.5,71.5;518.5,122.0|530.0,131.0;518.5,122.0;543.5,135.5|518.5,122.0;445.5,71.5;543.5,135.5|543.5,135.5;445.5,71.5;552.5,137.0|445.5,71.5;435.5,65.0;552.5,137.0|435.5,65.0;310.0,-14.5;552.5,137.0|552.5,137.0;310.0,-14.5;564.0,136.5|310.0,-14.5;296.0,-23.0;564.0,136.5|564.0,136.5;296.0,-23.0;574.5,137.0|574.5,137.0;296.0,-23.0;585.0,137.5|587.5,139.5;585.0,137.5;589.5,137.0|585.0,137.5;296.0,-23.0;589.5,137.0|589.5,137.0;296.0,-23.0;598.0,136.5|598.0,136.5;296.0,-23.0;607.5,137.0|609.0,139.5;607.5,137.0;611.0,137.0|607.5,137.0;296.0,-23.0;611.0,137.0|611.0,137.0;296.0,-23.0;619.0,136.0|619.0,136.0;296.0,-23.0;630.5,135.5|632.0,138.0;630.5,135.5;633.5,135.0|630.5,135.5;296.0,-23.0;633.5,135.0|633.5,135.0;296.0,-23.0;640.0,135.5|640.0,135.5;296.0,-23.0;650.5,134.5|652.0,137.5;650.5,134.5;654.0,134.5|650.5,134.5;296.0,-23.0;654.0,134.5|654.0,134.5;296.0,-23.0;664.5,136.0|664.5,136.0;296.0,-23.0;675.0,136.0|676.5,139.0;675.0,136.0;678.5,136.5|675.0,136.0;296.0,-23.0;678.5,136.5|678.5,136.5;296.0,-23.0;689.0,137.0|689.0,137.0;296.0,-23.0;698.0,140.0|699.5,143.0;698.0,140.0;702.0,140.5|698.0,140.0;296.0,-23.0;702.0,140.5|702.0,140.5;296.0,-23.0;715.0,141.5|715.0,141.5;296.0,-23.0;729.0,142.5|729.0,142.5;296.0,-23.0;741.0,144.5|752.0,149.0;741.0,144.5;765.5,152.5|741.0,144.5;296.0,-23.0;765.5,152.5|765.5,152.5;296.0,-23.0;782.0,153.0|782.0,153.0;296.0,-23.0;796.5,155.0|796.5,155.0;296.0,-23.0;809.5,158.0|809.5,158.0;296.0,-23.0;823.5,161.5|823.5,161.5;296.0,-23.0;837.5,162.5|837.5,162.5;296.0,-23.0;853.5,164.0|853.5,164.0;296.0,-23.0;846.0,156.0|846.0,156.0;296.0,-23.0;852.0,152.0|852.0,152.0;296.0,-23.0;857.0,144.5|296.0,-23.0;281.0,-27.5;857.0,144.5|857.0,144.5;281.0,-27.5;867.0,142.5|867.0,142.5;281.0,-27.5;861.5,137.0|861.5,137.0;281.0,-27.5;892.5,133.5|892.5,133.5;281.0,-27.5;894.5,129.0|281.0,-27.5;261.5,-32.5;894.5,129.0|899.5,147.0;900.5,141.5;908.0,142.5|900.5,141.5;900.0,134.5;908.0,142.5|908.0,142.5;894.5,129.0;914.5,136.0|914.5,136.0;894.5,129.0;920.5,131.5|894.5,129.0;261.5,-32.5;920.5,131.5|920.5,131.5;261.5,-32.5;925.5,127.0|925.5,127.0;261.5,-32.5;929.0,122.5|929.0,122.5;261.5,-32.5;935.0,117.0|935.0,117.0;261.5,-32.5;941.5,107.5|941.5,107.5;261.5,-32.5;946.5,103.5|946.5,103.5;261.5,-32.5;955.5,98.0|955.5,98.0;261.5,-32.5;964.5,92.0|964.5,92.0;261.5,-32.5;971.5,87.0|971.5,87.0;261.5,-32.5;977.0,83.0|977.0,83.0;261.5,-32.5;985.5,78.0|985.5,78.0;261.5,-32.5;995.5,74.0|995.5,74.0;261.5,-32.5;1006.0,71.0|1006.0,71.0;261.5,-32.5;1021.5,66.0|1021.5,66.0;261.5,-32.5;1048.0,62.5|1048.0,62.5;261.5,-32.5;1072.0,50.0|1072.0,50.0;261.5,-32.5;1073.5,33.5|1073.5,33.5;261.5,-32.5;1068.0,18.5|1068.0,18.5;261.5,-32.5;1075.0,9.5|1075.0,9.5;261.5,-32.5;1088.5,8.0|1088.5,8.0;261.5,-32.5;1095.5,7.0|1095.5,7.0;261.5,-32.5;1107.5,5.5|1139.0,13.5;1128.5,7.5;1151.5,20.0|1162.5,26.5;1151.5,20.0;1176.5,29.0|1151.5,20.0;1128.5,7.5;1176.5,29.0|1176.5,29.0;1128.5,7.5;1193.0,26.0|1193.0,26.0;1128.5,7.5;1209.0,19.0|1209.0,19.0;1118.0,6.0;1230.5,12.5|1230.5,12.5;1118.0,6.0;1254.0,6.0|1118.0,6.0;1107.5,5.5;1254.0,6.0|1107.5,5.5;261.5,-32.5;1254.0,6.0|1254.0,6.0;261.5,-32.5;1270.5,3.5|261.5,-32.5;248.0,-33.0;1270.5,3.5|1270.5,3.5;248.0,-33.0;1280.5,-5.5|1280.5,-5.5;248.0,-33.0;1284.5,-20.5|1284.5,-20.5;248.0,-33.0;1284.5,-33.0|1284.5,-33.0;248.0,-33.0;1288.0,-46.0|1288.0,-46.0;248.0,-33.0;1293.5,-56.0|1293.5,-56.0;248.0,-33.0;1304.0,-64.0|1304.0,-64.0;248.0,-33.0;1321.0,-67.5|1364.5,-45.5;1363.0,-53.5;1369.5,-54.0|1363.0,-53.5;1360.0,-60.5;1369.5,-54.0|1369.5,-54.0;1360.0,-60.5;1379.0,-62.0|1360.0,-60.5;1351.5,-64.5;1379.0,-62.0|1351.5,-64.5;1336.5,-66.0;1379.0,-62.0|1336.5,-66.0;1321.0,-67.5;1379.0,-62.0|1379.0,-62.0;1321.0,-67.5;1396.5,-62.5|1466.0,-35.0;1455.5,-50.0;1484.0,-40.5|1455.5,-50.0;1438.0,-57.5;1484.0,-40.5|1484.0,-40.5;1438.0,-57.5;1506.5,-48.5|1438.0,-57.5;1428.5,-60.0;1506.5,-48.5|1506.5,-48.5;1428.5,-60.0;1720.0,-49.5|1428.5,-60.0;1396.5,-62.5;1720.0,-49.5|1396.5,-62.5;1321.0,-67.5;1720.0,-49.5|1720.0,-49.5;1321.0,-67.5;1758.0,-49.0|1864.0,143.0;1846.0,86.0;1952.5,249.5|1846.0,86.0;1818.0,23.5;1952.5,249.5|1818.0,23.5;1797.0,-16.0;1952.5,249.5|1952.5,249.5;1797.0,-16.0;2055.0,274.0|2055.0,274.0;1797.0,-16.0;2049.5,-302.5|1797.0,-16.0;1758.0,-49.0;2049.5,-302.5|1758.0,-49.0;1321.0,-67.5;2049.5,-302.5|1321.0,-67.5;248.0,-33.0;2049.5,-302.5|248.0,-33.0;229.0,-31.5;2049.5,-302.5|2049.5,-302.5;229.0,-31.5;-71.5,-172.0|229.0,-31.5;-0.5,12.5;-71.5,-172.0|-71.0,143.0;-71.5,-172.0;-22.0,40.5|-22.0,40.5;-71.5,-172.0;-9.0,29.5|-9.0,29.5;-71.5,-172.0;-7.5,24.0|-7.5,24.0;-71.5,-172.0;-6.5,16.0|-6.5,16.0;-71.5,-172.0;-0.5,12.5"
    )
    val overhang1 = PhysicsObject.fromStringComponents(
        "172.5,22.0;171.0,15.0;243.0,16.0;227.5,21.5;213.0,24.5;184.0,29.0|275.0,29.0;262.5,18.0;293.5,38.0|290.5,56.5;293.5,38.0;342.0,62.0;327.5,69.5;300.5,76.5|293.5,38.0;262.5,18.0;330.0,29.5;347.5,43.5;342.0,62.0|330.0,29.5;262.5,18.0;319.5,10.0|262.5,18.0;243.0,16.0;319.5,10.0|243.0,16.0;171.0,15.0;189.5,7.0;271.0,-18.5;288.5,-12.0;305.0,-3.0;319.5,10.0|252.0,-22.5;271.0,-18.5;189.5,7.0;196.5,-5.5;233.5,-23.0|178.5,9.5;189.5,7.0;171.0,15.0",
        "171.0,15.0;178.5,9.5;189.5,7.0;196.5,-5.5;233.5,-23.0;252.0,-22.5;271.0,-18.5;288.5,-12.0;305.0,-3.0;319.5,10.0;330.0,29.5;347.5,43.5;342.0,62.0;327.5,69.5;300.5,76.5;290.5,56.5;293.5,38.0;275.0,29.0;262.5,18.0;243.0,16.0;227.5,21.5;213.0,24.5;184.0,29.0;172.5,22.0 ",
        "172.5,22.0;171.0,15.0;184.0,29.0|184.0,29.0;171.0,15.0;213.0,24.5|213.0,24.5;171.0,15.0;227.5,21.5|227.5,21.5;171.0,15.0;243.0,16.0|275.0,29.0;262.5,18.0;293.5,38.0|290.5,56.5;293.5,38.0;300.5,76.5|300.5,76.5;293.5,38.0;327.5,69.5|327.5,69.5;293.5,38.0;342.0,62.0|293.5,38.0;262.5,18.0;342.0,62.0|342.0,62.0;262.5,18.0;347.5,43.5|347.5,43.5;262.5,18.0;330.0,29.5|330.0,29.5;262.5,18.0;319.5,10.0|262.5,18.0;243.0,16.0;319.5,10.0|243.0,16.0;171.0,15.0;319.5,10.0|319.5,10.0;171.0,15.0;305.0,-3.0|305.0,-3.0;171.0,15.0;288.5,-12.0|288.5,-12.0;171.0,15.0;271.0,-18.5|252.0,-22.5;271.0,-18.5;233.5,-23.0|233.5,-23.0;271.0,-18.5;196.5,-5.5|196.5,-5.5;271.0,-18.5;189.5,7.0|271.0,-18.5;171.0,15.0;189.5,7.0|178.5,9.5;189.5,7.0;171.0,15.0"
    )
    val overhang2 = PhysicsObject.fromStringComponents(
        "942.0,134.5;939.0,123.5;991.0,139.0;979.0,142.5;964.0,143.0|991.0,139.0;939.0,123.5;1016.5,133.5|1016.5,133.5;939.0,123.5;1034.0,134.5|1076.5,157.5;1056.0,143.5;1129.5,160.0;1104.5,163.5|1056.0,143.5;1034.0,134.5;1184.5,146.0;1161.0,156.5;1129.5,160.0|1034.0,134.5;939.0,123.5;1213.0,128.5;1204.5,134.0;1184.5,146.0|1213.0,128.5;939.0,123.5;1306.5,86.0;1259.0,115.0;1229.0,125.0|1306.5,86.0;939.0,123.5;1404.0,28.0|1404.0,28.0;939.0,123.5;1223.0,49.5;1491.0,-15.0;1485.5,0.0;1461.5,12.5|1485.5,-26.5;1491.0,-15.0;1472.0,-25.0;1470.0,-29.0|1472.0,-25.0;1491.0,-15.0;1472.5,-21.0|1472.5,-21.0;1491.0,-15.0;1468.5,-16.5|1468.5,-16.5;1491.0,-15.0;1463.5,-16.0|1460.5,-30.0;1456.5,-26.5;1450.0,-41.0|1456.5,-26.5;1455.5,-21.5;1437.0,-43.0;1450.0,-41.0|1455.5,-21.5;1458.0,-17.5;1383.5,-24.0;1391.0,-36.0;1404.0,-44.0;1419.0,-44.5;1437.0,-43.0|1458.0,-17.5;1463.5,-16.0;1376.5,-11.0;1383.5,-24.0|1463.5,-16.0;1491.0,-15.0;1362.0,-5.5;1376.5,-11.0|1341.5,-30.5;1351.0,-16.5;1322.5,-32.0|1351.0,-16.5;1362.0,-5.5;1292.5,8.0;1295.0,-4.0;1299.0,-19.5;1306.0,-32.5;1322.5,-32.0|1362.0,-5.5;1491.0,-15.0;1287.0,15.0;1292.5,8.0|1287.0,15.0;1491.0,-15.0;1275.5,19.5|1244.0,19.0;1265.0,19.5;1230.5,32.5|1265.0,19.5;1275.5,19.5;1230.5,32.5|1275.5,19.5;1491.0,-15.0;1229.0,39.5;1230.5,32.5|1229.0,39.5;1491.0,-15.0;1223.0,49.5;1225.5,43.5|1223.0,49.5;939.0,123.5;1156.0,62.0;1212.5,48.5|1197.0,44.0;1212.5,48.5;1165.0,52.5;1157.0,44.0;1157.5,38.5;1176.0,39.5|1165.0,52.5;1212.5,48.5;1163.5,59.0|1163.5,59.0;1212.5,48.5;1156.0,62.0|1156.0,62.0;939.0,123.5;1073.0,72.5;1123.5,55.5;1137.5,51.0;1144.0,53.0|1132.0,32.5;1137.5,51.0;1130.5,52.0|1130.5,52.0;1137.5,51.0;1123.5,55.5|1114.5,28.0;1118.0,53.0;1112.0,52.5|1118.0,53.0;1123.5,55.5;1106.5,54.0;1112.0,52.5|1098.5,30.5;1102.0,52.5;1096.5,54.0|1102.0,52.5;1106.5,54.0;1096.5,54.0|1106.5,54.0;1123.5,55.5;1073.0,72.5;1090.5,57.0;1096.5,54.0|1073.0,72.5;939.0,123.5;965.0,110.0;1015.5,84.0;1033.5,79.0;1049.5,76.0|993.5,93.5;1002.0,90.0;976.0,102.5|1002.0,90.0;1015.5,84.0;965.0,110.0;976.0,102.5|947.5,113.0;965.0,110.0;939.0,123.5",
        "939.0,123.5;947.5,113.0;965.0,110.0;976.0,102.5;993.5,93.5;1002.0,90.0;1015.5,84.0;1033.5,79.0;1049.5,76.0;1073.0,72.5;1090.5,57.0;1096.5,54.0;1098.5,30.5;1102.0,52.5;1106.5,54.0;1112.0,52.5;1114.5,28.0;1118.0,53.0;1123.5,55.5;1130.5,52.0;1132.0,32.5;1137.5,51.0;1144.0,53.0;1156.0,62.0;1163.5,59.0;1165.0,52.5;1157.0,44.0;1157.5,38.5;1176.0,39.5;1197.0,44.0;1212.5,48.5;1223.0,49.5;1225.5,43.5;1229.0,39.5;1230.5,32.5;1244.0,19.0;1265.0,19.5;1275.5,19.5;1287.0,15.0;1292.5,8.0;1295.0,-4.0;1299.0,-19.5;1306.0,-32.5;1322.5,-32.0;1341.5,-30.5;1351.0,-16.5;1362.0,-5.5;1376.5,-11.0;1383.5,-24.0;1391.0,-36.0;1404.0,-44.0;1419.0,-44.5;1437.0,-43.0;1450.0,-41.0;1460.5,-30.0;1456.5,-26.5;1455.5,-21.5;1458.0,-17.5;1463.5,-16.0;1468.5,-16.5;1472.5,-21.0;1472.0,-25.0;1470.0,-29.0;1485.5,-26.5;1491.0,-15.0;1485.5,0.0;1461.5,12.5;1404.0,28.0;1306.5,86.0;1259.0,115.0;1229.0,125.0;1213.0,128.5;1204.5,134.0;1184.5,146.0;1161.0,156.5;1129.5,160.0;1104.5,163.5;1076.5,157.5;1056.0,143.5;1034.0,134.5;1016.5,133.5;991.0,139.0;979.0,142.5;964.0,143.0;942.0,134.5 ",
        "942.0,134.5;939.0,123.5;964.0,143.0|964.0,143.0;939.0,123.5;979.0,142.5|979.0,142.5;939.0,123.5;991.0,139.0|991.0,139.0;939.0,123.5;1016.5,133.5|1016.5,133.5;939.0,123.5;1034.0,134.5|1076.5,157.5;1056.0,143.5;1104.5,163.5|1104.5,163.5;1056.0,143.5;1129.5,160.0|1056.0,143.5;1034.0,134.5;1129.5,160.0|1129.5,160.0;1034.0,134.5;1161.0,156.5|1161.0,156.5;1034.0,134.5;1184.5,146.0|1034.0,134.5;939.0,123.5;1184.5,146.0|1184.5,146.0;939.0,123.5;1204.5,134.0|1204.5,134.0;939.0,123.5;1213.0,128.5|1213.0,128.5;939.0,123.5;1229.0,125.0|1229.0,125.0;939.0,123.5;1259.0,115.0|1259.0,115.0;939.0,123.5;1306.5,86.0|1306.5,86.0;939.0,123.5;1404.0,28.0|1404.0,28.0;939.0,123.5;1461.5,12.5|1461.5,12.5;939.0,123.5;1485.5,0.0|1485.5,0.0;939.0,123.5;1491.0,-15.0|1485.5,-26.5;1491.0,-15.0;1470.0,-29.0|1470.0,-29.0;1491.0,-15.0;1472.0,-25.0|1472.0,-25.0;1491.0,-15.0;1472.5,-21.0|1472.5,-21.0;1491.0,-15.0;1468.5,-16.5|1468.5,-16.5;1491.0,-15.0;1463.5,-16.0|1460.5,-30.0;1456.5,-26.5;1450.0,-41.0|1456.5,-26.5;1455.5,-21.5;1450.0,-41.0|1450.0,-41.0;1455.5,-21.5;1437.0,-43.0|1455.5,-21.5;1458.0,-17.5;1437.0,-43.0|1437.0,-43.0;1458.0,-17.5;1419.0,-44.5|1419.0,-44.5;1458.0,-17.5;1404.0,-44.0|1404.0,-44.0;1458.0,-17.5;1391.0,-36.0|1391.0,-36.0;1458.0,-17.5;1383.5,-24.0|1458.0,-17.5;1463.5,-16.0;1383.5,-24.0|1383.5,-24.0;1463.5,-16.0;1376.5,-11.0|1463.5,-16.0;1491.0,-15.0;1376.5,-11.0|1376.5,-11.0;1491.0,-15.0;1362.0,-5.5|1341.5,-30.5;1351.0,-16.5;1322.5,-32.0|1351.0,-16.5;1362.0,-5.5;1322.5,-32.0|1322.5,-32.0;1362.0,-5.5;1306.0,-32.5|1306.0,-32.5;1362.0,-5.5;1299.0,-19.5|1299.0,-19.5;1362.0,-5.5;1295.0,-4.0|1295.0,-4.0;1362.0,-5.5;1292.5,8.0|1362.0,-5.5;1491.0,-15.0;1292.5,8.0|1292.5,8.0;1491.0,-15.0;1287.0,15.0|1287.0,15.0;1491.0,-15.0;1275.5,19.5|1244.0,19.0;1265.0,19.5;1230.5,32.5|1265.0,19.5;1275.5,19.5;1230.5,32.5|1275.5,19.5;1491.0,-15.0;1230.5,32.5|1230.5,32.5;1491.0,-15.0;1229.0,39.5|1229.0,39.5;1491.0,-15.0;1225.5,43.5|1225.5,43.5;1491.0,-15.0;1223.0,49.5|1491.0,-15.0;939.0,123.5;1223.0,49.5|1223.0,49.5;939.0,123.5;1212.5,48.5|1197.0,44.0;1212.5,48.5;1176.0,39.5|1176.0,39.5;1212.5,48.5;1157.5,38.5|1157.5,38.5;1212.5,48.5;1157.0,44.0|1157.0,44.0;1212.5,48.5;1165.0,52.5|1165.0,52.5;1212.5,48.5;1163.5,59.0|1163.5,59.0;1212.5,48.5;1156.0,62.0|1212.5,48.5;939.0,123.5;1156.0,62.0|1156.0,62.0;939.0,123.5;1144.0,53.0|1144.0,53.0;939.0,123.5;1137.5,51.0|1132.0,32.5;1137.5,51.0;1130.5,52.0|1130.5,52.0;1137.5,51.0;1123.5,55.5|1137.5,51.0;939.0,123.5;1123.5,55.5|1114.5,28.0;1118.0,53.0;1112.0,52.5|1118.0,53.0;1123.5,55.5;1112.0,52.5|1112.0,52.5;1123.5,55.5;1106.5,54.0|1098.5,30.5;1102.0,52.5;1096.5,54.0|1102.0,52.5;1106.5,54.0;1096.5,54.0|1106.5,54.0;1123.5,55.5;1096.5,54.0|1096.5,54.0;1123.5,55.5;1090.5,57.0|1090.5,57.0;1123.5,55.5;1073.0,72.5|1123.5,55.5;939.0,123.5;1073.0,72.5|1073.0,72.5;939.0,123.5;1049.5,76.0|1049.5,76.0;939.0,123.5;1033.5,79.0|1033.5,79.0;939.0,123.5;1015.5,84.0|993.5,93.5;1002.0,90.0;976.0,102.5|1002.0,90.0;1015.5,84.0;976.0,102.5|976.0,102.5;1015.5,84.0;965.0,110.0|1015.5,84.0;939.0,123.5;965.0,110.0|947.5,113.0;965.0,110.0;939.0,123.5"
    )

    val carWreck = PhysicsObject.fromStringComponents(
        "9.5,19.5;3.5,15.0;31.5,24.5;19.0,22.5|43.0,33.0;31.5,24.5;71.5,34.5;54.0,34.0|31.5,24.5;3.5,15.0;80.5,29.0;71.5,34.5|80.5,29.0;3.5,15.0;2.0,8.0;12.5,3.5;96.5,9.0;99.5,16.5;97.5,25.0;90.5,28.5",
        "3.5,15.0;2.0,8.0;12.5,3.5;96.5,9.0;99.5,16.5;97.5,25.0;90.5,28.5;80.5,29.0;71.5,34.5;54.0,34.0;43.0,33.0;31.5,24.5;19.0,22.5;9.5,19.5 ",
        "9.5,19.5;3.5,15.0;19.0,22.5|19.0,22.5;3.5,15.0;31.5,24.5|43.0,33.0;31.5,24.5;54.0,34.0|54.0,34.0;31.5,24.5;71.5,34.5|31.5,24.5;3.5,15.0;71.5,34.5|71.5,34.5;3.5,15.0;80.5,29.0|80.5,29.0;3.5,15.0;90.5,28.5|90.5,28.5;3.5,15.0;97.5,25.0|97.5,25.0;3.5,15.0;99.5,16.5|99.5,16.5;3.5,15.0;96.5,9.0|96.5,9.0;3.5,15.0;12.5,3.5|2.0,8.0;12.5,3.5;3.5,15.0"
    )

    val corpus = PhysicsObject.fromStringComponents(
        "7.0,10.5;0.0,4.5;22.5,13.0;21.5,15.5;18.0,17.0;11.0,13.0|12.5,16.0;11.0,13.0;18.0,17.0|22.5,13.0;0.0,4.5;38.5,13.5|38.5,13.5;0.0,4.5;74.5,12.5;71.0,14.0;64.5,15.5;50.5,14.5|52.5,16.5;50.5,14.5;57.0,17.0|57.0,17.0;50.5,14.5;64.5,15.5;61.0,17.5|72.5,16.0;71.0,14.0;74.5,12.5|74.5,12.5;0.0,4.5;86.0,8.5;83.5,10.5;79.0,12.0|86.0,8.5;0.0,4.5;96.5,6.5;94.0,8.5|96.5,6.5;0.0,4.5;10.0,2.5;68.0,1.5;97.5,2.0;100.0,6.0",
        "0.0,4.5;10.0,2.5;68.0,1.5;97.5,2.0;100.0,6.0;96.5,6.5;94.0,8.5;86.0,8.5;83.5,10.5;79.0,12.0;74.5,12.5;72.5,16.0;71.0,14.0;64.5,15.5;61.0,17.5;57.0,17.0;52.5,16.5;50.5,14.5;38.5,13.5;22.5,13.0;21.5,15.5;18.0,17.0;12.5,16.0;11.0,13.0;7.0,10.5 ",
        "7.0,10.5;0.0,4.5;11.0,13.0|12.5,16.0;11.0,13.0;18.0,17.0|11.0,13.0;0.0,4.5;18.0,17.0|18.0,17.0;0.0,4.5;21.5,15.5|21.5,15.5;0.0,4.5;22.5,13.0|22.5,13.0;0.0,4.5;38.5,13.5|38.5,13.5;0.0,4.5;50.5,14.5|52.5,16.5;50.5,14.5;57.0,17.0|57.0,17.0;50.5,14.5;61.0,17.5|61.0,17.5;50.5,14.5;64.5,15.5|50.5,14.5;0.0,4.5;64.5,15.5|64.5,15.5;0.0,4.5;71.0,14.0|72.5,16.0;71.0,14.0;74.5,12.5|71.0,14.0;0.0,4.5;74.5,12.5|74.5,12.5;0.0,4.5;79.0,12.0|79.0,12.0;0.0,4.5;83.5,10.5|83.5,10.5;0.0,4.5;86.0,8.5|86.0,8.5;0.0,4.5;94.0,8.5|94.0,8.5;0.0,4.5;96.5,6.5|96.5,6.5;0.0,4.5;100.0,6.0|100.0,6.0;0.0,4.5;97.5,2.0|97.5,2.0;0.0,4.5;68.0,1.5|10.0,2.5;68.0,1.5;0.0,4.5"
    )
}

fun listOfPolygonsFromString(s: String): Array<Vector2> {
    return s.trim().split(";").map { it.split(",").map { floatValue -> floatValue.toFloat() } }
        .map { Vector2(it.first(), it.last()) }.toTypedArray()
}


fun listOfPolygonSplitsFromString(s: String): List<Array<Vector2>> {
    return s.trim().split("|").map { listOfPolygonsFromString(it) }
}

fun listOfTriangleVertices(s: String): FloatArray {
    return listOfPolygonSplitsFromString(s).flatMap { it.toList() }.flatMap { listOf(it.x, it.y) }.toFloatArray()
}

fun listOfTriangleIndices(l: FloatArray): ShortArray {
    return (0 until l.size / 2).map { it.toShort() }.toShortArray()
}

fun Array<Vector2>.toFloatArray() = flatMap { listOf(it.x, it.y) }.toFloatArray()
